<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nathan Cahill]]></title>
  <link href="http://nathancahill.github.com/atom.xml" rel="self"/>
  <link href="http://nathancahill.github.com/"/>
  <updated>2012-10-12T15:01:52-04:00</updated>
  <id>http://nathancahill.github.com/</id>
  <author>
    <name><![CDATA[Nathan Cahill]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Photoshop In-memory Scratch Disk]]></title>
    <link href="http://nathancahill.github.com/photoshop-in-memory-scratch-disk/"/>
    <updated>2012-10-12T05:51:00-04:00</updated>
    <id>http://nathancahill.github.com/photoshop-in-memory-scratch-disk</id>
    <content type="html"><![CDATA[<p>After getting a new Macbook Pro with 16GB of RAM (<a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16820231576">G.Skill</a>, not from Apple, highly recommended),
I starting looking for ways to put it to use. One of my favorite hacks is
mounting a virtual disk with a portion of the RAM. Once you create a RAM disk, you
can take advantage of the <a href="http://en.wikipedia.org/wiki/DDR3_SDRAM#Modules">theoretical 10GB/s read/write speed</a> to RAM.
Everything stored in the RAM is temporary and while disappear on unmount or reboot.</p>

<p>It&#8217;s pretty simple to do, just run this command in the Terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ diskutil erasevolume HFS+ "ramdisk" `hdiutil attach -nomount ram://4194304`
</span></code></pre></td></tr></table></div></figure>


<p>The number at the end of the command is the number of 512 byte sectors
for the disk. For a 2GB disk: 2GB = 2147483648 bytes. 2147483648 / 512 = 4194304 disk sectors.</p>

<p>After that, you can set Photoshop&#8217;s scratch disk to ramdisk. One caveat is that
you&#8217;ll need to run the command every time you restart the computer. So drop it
in an Automator app and add it to your Startup Items.</p>

<p><img src="http://f.cl.ly/items/1f240e2J0E2v1o2z3c0j/Screen%20Shot%202012-10-12%20at%202.36.23%20PM.png"></p>

<p>Some other cool things you can do with a very fast, but temporary disk:</p>

<ul>
<li>Store a working copy of large files for instant access</li>
<li>Run <a href="http://www.freesmug.org/portableapps">portable apps</a> entirely in the memory</li>
<li>Get a small linux distro like <a href="http://puppylinux.org/main/Overview%20and%20Getting%20Started.htm">Puppy Linux</a>
and running it from a VM. Entire operating system in memory.</li>
</ul>


<p>Have another cool use for an in-memory disk? Comment below or tweet me <a href="https://twitter.com/nathancahill">@nathancahill</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackers and Hustlers: Where next?]]></title>
    <link href="http://nathancahill.github.com/hackers-and-hustlers-where-next/"/>
    <updated>2012-09-24T20:14:00-04:00</updated>
    <id>http://nathancahill.github.com/hackers-and-hustlers-where-next</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://f.cl.ly/items/3d042x1j1X2d0B0C1z1i/hh-sticker.png" width="110" height="110"></p>

<p>As we&#8217;re getting close to 1000 users on Hackers and Hustlers, I&#8217;d like to start a discussion about the future of H&amp;H.</p>

<p>We used to have excellent discussions on here. A year ago and 600 people less, it was not unusual to see 40+ comment discussions, there was even talk of Facebook needing threading in comments. We were opinionated and expressive. Links posted tended to be relevant to the group&#8217;s goal: creating a startup culture in Michigan.</p>

<p>Lately, H&amp;H has been swamped by all kinds of link posts and very little discussion or response. The volume of posts has more than tripled, but discussion and participation has decreased inversely. And the Start Garden endorsement requests are starting to feel like Farmville spam.</p>

<p>I know that this is a well documented phenomena in online communities. Digg, Youtube, Slashdot, Reddit and Hacker News have all followed the same pattern. What starts as a curated or exclusive ecosystem (and quickly gains popularity because of that), is inevitably degrade to chatter and spam.</p>

<p>Nathan Bashaw and I talked several times at the beginning of this year about the direction H&amp;H was heading. We had just hit 600 members and it was the only reason that I ever logged in to Facebook. We talked about the possibility of H&amp;H growing too big for itself, but we hoped that quality discussions and links would float to the top. Instead, they seems to get buried too quickly.</p>

<p>What&#8217;s next? Where do we go from here? We are still a solid community of michiganders, hacking and hustling our way through the startup life. Props to Bashaw for adding Kyle Mulka, Ryan Goins and Nate West as admins. You&#8217;ve all been doing a great job keeping everything running smoothly. And I&#8217;m excited for the H&amp;H stickers too, they are awesome. If you haven&#8217;t yet, go check them out <a href="https://www.facebook.com/groups/hackersandhustlers/permalink/433723686664757/">here</a>.</p>

<p>So here&#8217;s what I suggest: Let&#8217;s participate more in discussions and let&#8217;s post stuff that&#8217;s more relevant to the group. Let&#8217;s see the projects you guys are working on, instead of the latest trend on HN! Don&#8217;t just ask for an endorsement on Start Garden, post a Show H&amp;H of your prototype or even just your landing page. Give feedback, mentor, and encourage others. And for gods sake, post jobs to hackersandhustlers.org. Thoughtful discussion online (gasp) is not dead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Circus, Nginx and Websockets]]></title>
    <link href="http://nathancahill.github.com/circus/"/>
    <updated>2012-09-24T03:28:00-04:00</updated>
    <id>http://nathancahill.github.com/circus</id>
    <content type="html"><![CDATA[<p>Looking for a high performance, powerfull process manager for a Python project I&#8217;m working on, I stumbled on <a href="http://circus.io/">Circus</a> on this <a href="http://blog.ziade.org/2012/06/28/wgsi-web-servers-bench/">excellent benchmark blog post</a>. After running my own benchmark tests, I agree that the <a href="http://circus.io/">Circus</a> + <a href="http://chaussette.readthedocs.org">Chaussette</a> + <a href="http://meinheld.org/">Meinheld</a> stack is the way to go. High concurrency, fast response time, and socket support are the features that pulled me in. I&#8217;m switching off of <a href="http://supervisord.org/">Supervisord</a>, because: a) Circus integrates directly with <a href="http://zeromq.org/">ZeroMQ</a>, and b) <a href="http://gunicorn.org/">Gunicorn</a> + Supervisord requires two levels of process management: Supervisor controls gunicorn, and gunicorn in turn watching it&#8217;s own worker processes. Circus keeps everything on the same level.</p>

<p><a href="http://circus.readthedocs.org/">circus.readthedocs.org</a> has excellent documentation for getting started with Circus. I did run in to a couple caveats though:</p>

<h2>Circus doesn&#8217;t start on boot</h2>

<p>I started testing Circus in the command line by running <code>circusd circus.ini</code>. I quickly switched to running it as a service in Upstart, using this <code>etc/init/circus.conf</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">start</span> <span class="n">on</span> <span class="n">filesystem</span> <span class="ow">and</span> <span class="n">net</span><span class="o">-</span><span class="n">device</span><span class="o">-</span><span class="n">up</span> <span class="n">IFACE</span><span class="o">=</span><span class="n">lo</span>
</span><span class='line'><span class="k">exec</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">circusd</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">circus</span><span class="o">.</span><span class="n">ini</span>
</span></code></pre></td></tr></table></div></figure>


<p>This script just waits for the file system and networking to become available, then it runs <code>circusd</code> with my config file in <code>/etc/circus.ini</code>. Easy enough.</p>

<h2>Getting Circus workers to work with virtual environments</h2>

<p>Although Circus workers have awesome properties like env, copy_env and copy_path (which all work great when running from a local folder), this falls apart when starting the daemon from Upstart. I looked at my $PATH variable in an active environment, and copied it into the worker config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">env</span> <span class="o">=</span> <span class="n">PATH</span><span class="o">=/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">sbin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="p">:</span><span class="o">/</span><span class="n">sbin</span><span class="p">:</span><span class="o">/</span><span class="nb">bin</span><span class="p">,</span><span class="n">VIRTUAL_ENV</span><span class="o">=/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">venv</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Circus Web Console behind Nginx with Sockets</h2>

<p>Circus has a sweet web console to manage processes and workers. By default, it runs on port 8080, and uses websockets to push stats on CPU, memory and socket reads for each running process. The web console should never be publicly available, it allows arbitrary commands to be executed on the server. The preferred way to password protect the console is to use Nginx like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listen</span>  <span class="mi">8001</span><span class="p">;</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">~/</span><span class="n">media</span><span class="o">/*</span><span class="p">(</span><span class="o">.</span><span class="n">jpg</span><span class="o">|.</span><span class="n">css</span><span class="o">|.</span><span class="n">js</span><span class="p">)</span><span class="err">$</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">alias</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">python2</span><span class="o">.</span><span class="mi">7</span><span class="o">/</span><span class="n">dist</span><span class="o">-</span><span class="n">packages</span><span class="o">/</span><span class="n">circus</span><span class="o">/</span><span class="n">web</span><span class="o">/</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">For</span> <span class="err">$</span><span class="n">proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>      <span class="n">proxy_set_header</span> <span class="n">Host</span> <span class="err">$</span><span class="n">http_host</span><span class="p">;</span>
</span><span class='line'>      <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>      <span class="n">proxy_pass</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">8080</span><span class="p">;</span>
</span><span class='line'>      <span class="n">auth_basic</span>            <span class="s">&quot;Restricted&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">auth_basic_user_file</span>  <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">htpasswd</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have the web console process listening on 8080: it&#8217;s serving both the website and the socket connection. Notice the issue? Nginx <a href="https://github.com/LearnBoost/socket.io/wiki/Nginx-and-socket.io">doesn&#8217;t support websockets</a>! So I&#8217;m running Nginx on port 8001, and the web console processs on 8080. And this is where Varnish comes in: Varnish is a caching proxy, but I&#8217;ll just use it to multiplex port 8002 to two seperate backends. If the connection is a websocket, route it directly to 8080. If it&#8217;s the website, switch the backend to Nginx on port 8001:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">backend</span> <span class="n">default</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="s">&quot;8001&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">backend</span> <span class="n">socket</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="s">&quot;8080&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">connect_timeout</span> <span class="o">=</span> <span class="mi">1</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">first_byte_timeout</span> <span class="o">=</span> <span class="mi">2</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">between_bytes_timeout</span> <span class="o">=</span> <span class="mi">60</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">sub</span> <span class="n">vcl_pipe</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">upgrade</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="nb">set</span> <span class="n">bereq</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">upgrade</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">upgrade</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">sub</span> <span class="n">vcl_recv</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">Upgrade</span> <span class="o">~</span> <span class="s">&quot;(?i)websocket&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">req</span><span class="o">.</span><span class="n">backend</span> <span class="o">=</span> <span class="n">socket</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">pipe</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FontPrep: The missing CSS3 font generator for Mac OS X]]></title>
    <link href="http://nathancahill.github.com/fontprep-the-missing-css3-font-generator-for-mac-os-x/"/>
    <updated>2012-09-19T04:32:00-04:00</updated>
    <id>http://nathancahill.github.com/fontprep-the-missing-css3-font-generator-for-mac-os-x</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://nathancahill.github.com/images/window3.png"></p>

<p>A couple days ago, if you asked me how to add webfonts to my website, I would have immediately said <a href="http://www.fontsquirrel.com/">Font Squirrel</a>. One of the reasons that Font Squirrel is awesome is their <a href="http://www.fontsquirrel.com/fontface/generator">@font-face generator</a>. It is the most popular solution for generating webfonts and font CSS online.</p>

<p>That&#8217;s all about to change. See, there are several limitations to using an online generator for fonts. After uploading two or three fonts, it&#8217;s obvious that Font Squirrel would be not be able to handle hundreds of font files. A web browser simply isn&#8217;t built to support that. Previewing generated fonts in the browser on the fly is also impossible. There&#8217;s also the licensing to worry about: Font Squirrel only accepts fonts that are &#8220;legally eligible for web embedding.&#8221;</p>

<p><a href="http://fontprep.com/">FontPrep</a> solves all of this. FontPrep is a native Mac OS X app that prepares your fonts for the web. At its core, it generates webfont bundles with full browser compatibility. After dragging and dropping a TTF font on to the app, the whole bundle can be downloaded, including WOFF, SVG and EOT formats, and the snippets of CSS needed to add these fonts to a website. And that&#8217;s just scraping the surface of what the app can do:</p>

<p>FontPrep can spin up a local server running a font testbed in the browser. After adding fonts to FontPrep, the entire webfont can be previewed in the browser. Every glyph in the typeface is rendered, as well as a waterfall of font sizes and a text area for testing the font with custom text. Font size is easily changed as well.</p>

<p>According to the creators, <a href="https://twitter.com/briangonzalez__">Brian</a> and <a href="https://twitter.com/artisfacto">Matthew Gonzalez</a>, FontPrep was created with the goal of making an &#8220;easy to use, drag &amp; drop OSX app which makes our lives as developers much easier when it comes to working with fonts.&#8221; They succeeded: not only is FontPrep highly functional, it is also beautiful. Admittedly, their app have less options than Expert mode on Font Squirrel, but they are working on adding more support. Meanwhile, head over to <a href="http://fontprep.com/">FontPrep.com</a> and pick up the app. It&#8217;s free for the next 6 hours, after that it costs $5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm + BetterTouchTool]]></title>
    <link href="http://nathancahill.github.com/iterm-plus-bettertouchtool/"/>
    <updated>2012-09-19T01:35:00-04:00</updated>
    <id>http://nathancahill.github.com/iterm-plus-bettertouchtool</id>
    <content type="html"><![CDATA[<p>The best terminal emulator for Mac OS X is <a href="http://www.iterm2.com/">iTerm2</a>. I especially love the drop-down style windows.
No matter what I&#8217;m doing, there&#8217;s always a command prompt a &#x2318;+Tab away. And it floats over my current windows, so I
can read commands from <a href="http://stackoverflow.com/">Stackoverflow</a> while I&#8217;m typing #noob.</p>

<p>This is the year 2012 though, and while we don&#8217;t have <a href="http://fuckjetpacks.com/read/why">jet packs</a> yet, we should at least be able to
flick things around a screen with a swipe of our fingers. Enter <a href="http://www.boastr.de/">BetterTouchTool</a>. This is basically an awesome
app that lets you define a bunch of custom gestures for your trackpad and Magic Mouse. <a href="http://qsapp.com/">Quicksilver</a> for gestures, if you will.</p>

<p>The magic glue for all of this is the key-binding option in iTerm. Go to iTerm Preferences > Profiles > Hotkey Window. You can choose
a shortcut key, in my case &#x2303;&#x2318;O, to trigger the app. Since it&#8217;s a system-wide hotkey, choose something that doesn&#8217;t conflict with apps you use.
&#x2303;&#x2318;Z is a really bad choice if you use Photoshop ;)</p>

<p><img src="http://nathancahill.github.com/images/window.png"></p>

<p>Once you have the HotKey set up in iTerm, set up a Global gesture in BetterTouchTool. I&#8217;m a fan of the three-finger swipe down, it feels natural and doesn&#8217;t
conflict with Spaces for me, since I&#8217;m still rocking Snow Leopard. Obviously hook it up to the same shortcut key you used in iTerm. Now,
you should be able to swipe to get a command prompt.</p>

<p>But how about sending it back up? It feels natural to swipe back up, but there&#8217;s no way to trigger that in iTerm. So, fellow hacker,
add a second gesture, the three-finger swipe up, and bind it to &#x2318;+Tab. This simply switches back to the original app
you were using before you triggered iTerm, and effectively sends the window swishing back up.</p>

<p><img src="http://nathancahill.github.com/images/window2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Requests-Cache play nicely with Heroku]]></title>
    <link href="http://nathancahill.github.com/make-requests-cache-play-nicely-with-heroku/"/>
    <updated>2012-09-09T02:59:00-04:00</updated>
    <id>http://nathancahill.github.com/make-requests-cache-play-nicely-with-heroku</id>
    <content type="html"><![CDATA[<p>The Python module that has saved me the most time is, without a doubt, the
<a href="http://docs.python-requests.org/en/latest/index.html">Requests</a> module by
<a href="http://kennethreitz.com/">Kenneth Reitz</a>. This guy never fails to produces awesomeness.</p>

<p>The tagline is &#8220;HTTP for Humans&#8221;, and the whole thing is very pythonic. It was missing,
however, an equally pythonic way to deal with caching. Fortunately,
<a href="https://github.com/reclosedev/requests-cache">Requests-Cache</a> fills the void. It supports
several different caching backends, as well as an extensible interface for adding new
ones.</p>

<p>SQLite is the default, and probably works well in most cases. But it fails completely when
deploying to Heroku. That&#8217;s because SQLite requires a permanent writable file system. It
ultimately needs access to the POSIX fopen() and fwrite() API calls to a particular file.
<a href="https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem">Heroku does not provide a permanent writable file system</a>.
It doesn&#8217;t even allow the SQLite3 module to be installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ImportError: No module named _sqlite3</span></code></pre></td></tr></table></div></figure>


<p>Even though Requests-Cache supports in memory caching, I had to remove a couple parts of
the module to get it to even import on Heroku. I removed the sqlite.py backend file <code>requests_cache/backends/sqlite.py</code>
and delete the couple sqlite lines from <code>requests_cache/backends/__init__.py</code>. After
that, it imported fine and is easy to set up in memory caches, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>requests_cache.configure('cache_name', 'memory')</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s <a href="https://github.com/nathancahill/requests-cache">my fork of the repo</a> with those changes.</p>

<p>If you know a better solution, or have another way of caching HTTP requests easily with
Python, let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth with Twitter and Python Flask]]></title>
    <link href="http://nathancahill.github.com/oauth-with-twitter-and-python-flask/"/>
    <updated>2012-09-07T20:04:00-04:00</updated>
    <id>http://nathancahill.github.com/oauth-with-twitter-and-python-flask</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a couple tips on getting OAuth to work with Python Flask.</p>

<p>First, Flask has bunch of <a href="http://flask.pocoo.org/extensions/">awesome extensions</a> that
make coding with Flask so easy. The two I am using for an OAuth login system are
<a href="http://packages.python.org/Flask-OAuth/">Flask-OAuth</a> (obviously), and
<a href="http://packages.python.org/Flask-Login/">Flask-Login</a>. The database I am using is
Postgres, with the great <a href="http://packages.python.org/Flask-SQLAlchemy/">Flask-SQLAlchemy</a>
ORM.</p>

<p>The User class I am using just needs 3 properties:</p>

<ul>
<li><code>username</code></li>
<li><code>token</code></li>
<li><code>secret</code></li>
</ul>


<p>For Flask-OAuth, most of the default configuration works as described. However, I did have
to change the <code>request_token_url</code>, <code>access_token_url</code> and <code>authorize_url</code>
to use https. The <code>access_token_url</code> should point to
&#8220;https://api.twitter.com/oauth/authenticate&#8221; for processing the login.</p>

<p>I had trouble getting it to recognize the callback URL. I kept getting this error: <code>raise OAuthException('Failed to generate request token')</code>. I gave up debugging it,
and just added the correct callback URL in the settings in Twitter.</p>

<p>Using Flask-Login is also straight forward. I initially didn&#8217;t know how to make enable a
User class to use the login system, turns out it&#8217;s just a four functions that have to be
included in the class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_id</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_authenticated</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_active</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_anonymous</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>The glue that makes the two play nicely together is all in these three functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/login&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">():</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">twitter</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="n">callback</span><span class="o">=</span><span class="n">url_for</span><span class="p">(</span><span class="s">&#39;oauth_authorized&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">next</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;next&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">request</span><span class="o">.</span><span class="n">referrer</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before I send a Twitter OAuth request, I make sure the current_user is not authenticated.
If I didn&#8217;t the OAuth would fail. Not sure why yet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&#39;/oauth-authorized&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nd">@twitter.authorized_handler</span>
</span><span class='line'><span class="k">def</span> <span class="nf">oauth_authorized</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
</span><span class='line'>  <span class="n">next_url</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;next&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">url_for</span><span class="p">(</span><span class="s">&#39;index&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">resp</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">next_url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">this_account</span> <span class="o">=</span> <span class="n">Account</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">username</span> <span class="o">=</span> <span class="n">resp</span><span class="p">[</span><span class="s">&#39;screen_name&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">this_account</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="n">new_account</span> <span class="o">=</span> <span class="n">Account</span><span class="p">(</span><span class="n">resp</span><span class="p">[</span><span class="s">&#39;screen_name&#39;</span><span class="p">],</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">resp</span><span class="p">[</span><span class="s">&#39;oauth_token&#39;</span><span class="p">],</span> <span class="n">resp</span><span class="p">[</span><span class="s">&#39;oauth_token_secret&#39;</span><span class="p">])</span>
</span><span class='line'>      <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">new_account</span><span class="p">)</span>
</span><span class='line'>      <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>      <span class="n">login_user</span><span class="p">(</span><span class="n">new_account</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">login_user</span><span class="p">(</span><span class="n">this_account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">next_url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What the callback handler does:</p>

<p>Once the authentication is complete, it looks in the database for the Twitter username. If
it&#8217;s not found, it creates a new account and calls <code>login_user()</code>. If it is, it uses
the returned account object to login the user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@twitter.tokengetter</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_twitter_token</span><span class="p">():</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">():</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">token</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">secret</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>This third function is self-explanatory.</p>

<p>Now, it&#8217;s as easy adding the <code>@login_required</code> decorator before a secure page
function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Film: Canon AE-1 Program]]></title>
    <link href="http://nathancahill.github.com/film-canon-ae-1-program/"/>
    <updated>2012-08-28T20:20:00-04:00</updated>
    <id>http://nathancahill.github.com/film-canon-ae-1-program</id>
    <content type="html"><![CDATA[<p><img src="http://nathancahill.github.com/images/ae-1/8.jpg"></p>

<div class="gallery">
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/2.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/2_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/4.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/4_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/5.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/5_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/7.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/7_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/1.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/1_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/9.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/9_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/10.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/10_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/11.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/11_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/12.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/12_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/13.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/13_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/14.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/14_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/15.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/15_m.jpg">
    </a>
    <a class="fancybox" href="http://nathancahill.github.com/images/ae-1/21.jpg" title="Film: Canon AE-1 Program" rel="gallery2">
        <img src="http://nathancahill.github.com/images/ae-1/21_m.jpg">
    </a>
    <div class="clear"></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Startup in... Latin America?]]></title>
    <link href="http://nathancahill.github.com/startup-in-dot-dot-dot-latin-america/"/>
    <updated>2012-08-16T00:41:00-04:00</updated>
    <id>http://nathancahill.github.com/startup-in-dot-dot-dot-latin-america</id>
    <content type="html"><![CDATA[<p>Paul Graham recently wrote about <a href="http://www.paulgraham.com/hubs.html">Why Startup Hubs Work</a>. He cited two reasons why startups do not die in startup hubs:</p>

<blockquote><p>&#8220;[1] being in a place where startups are the cool thing to do, and [2] chance meetings with people who can help you. And what drives them both is the number of startup people around you.&#8221;</p></blockquote>

<p>Starting a startup is hard enough, doing so in a place where it is seen as synonymous with unemployment is a major setback. And chance meetings with mentors and people pursuing the same ideas can be miraculous for a startup. While I believe these antidotes for &#8220;startup death&#8221; are true in developed countries like the US, developing countries like Guatemala bring new factors into play.</p>

<p><img class="right" src="http://www.comscoredatamine.com/wp-content/uploads/2011/06/avg-hours-on-sn-sites-apr-11-ww.jpg" title="'Average Time Spent on Social Networking Sites Across Geographies'" ></p>

<p>In the United States, the number of entrepreneurs has hovered around 10%, give or take, depending on the economy. In Latin America, on the other hand, this number <a href="http://www.internationalentrepreneurship.com/americas/">averages around 20%</a>, with the highest around 30-35% in Peru and Bolivia. Starting a startup is not looked down upon as unemployment, indeed, these people are thought highly of in the community.</p>

<p>Other quirks of a developing country that a startup can benefit from are the limited availability of good wages and the cheap abundance of resources. More people are likely to start their own business when they can get better wages working for themselves. Work-live places, an essential for startup entrepreneurs are easier than ever to create when the cost of living is <a href="http://www.numbeo.com/cost-of-living/country_result.jsp?country=Guatemala">a fifth of the cost in the US</a>. Latin American countries also tend to rapidly adopt new technologies: most people in Guatemala leapfrogged from no phone connection within miles to 3G cellphones in a couple of years. Argentina, Venezuela, Colombia, Chile, Mexico, Puerto Rico and Peru are 7 of the <a href="http://www.comscoredatamine.com/2011/06/average-time-spent-on-social-networking-sites-across-geographies/">top 20 countries using social networks</a>:</p>

<p>Lacking a strong community of mentors that startup hubs like Silicon Valley, Boston or Boulder offer is one of the biggest setbacks. But as the connectivity and education increases there is no question this will change. Guatemalan businesses are starting to prop up .com.gt websites in a similar way as the beginning of the .com bubble years ago. Given the rate of conversion to new technologies, the creativity and self-discipline people have to new startups and the economy of resourcefulness, Latin America will soon produce startups to rival Silicon Valley.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On extracting an element from a web page with CSS styles]]></title>
    <link href="http://nathancahill.github.com/on-extracting-an-element-from-a-web-page-with-css-styles/"/>
    <updated>2012-06-16T08:15:00-04:00</updated>
    <id>http://nathancahill.github.com/on-extracting-an-element-from-a-web-page-with-css-styles</id>
    <content type="html"><![CDATA[<p>The goal: to extract an element from a web page and display it independently from it&#8217;s original website.</p>

<p>Note: I initially toyed with running this whole process server-side, and it still may be the more efficient way to to this. This is extraordinarily difficult though, you will soon see why.</p>

<p>First, we fetch the complete web page from our target site. For example, news.google.com. We then dump the web page into an invisible div.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="s1">&#39;http://news.google.com/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$html</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;div style=&quot;display:none;&quot;&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$html</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our target element is the Recent News box on the right of the page. The id is &#8216;s_BREAKING_NEWS_BOX&#8217;. Extracting the HTML is easy enough with jQuery:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#s_BREAKING_NEWS_BOX&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">()).</span><span class="nx">remove</span><span class="p">().</span><span class="nx">html</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we were to just output the HTML at this point, we would get text with default browser styles. We need to copy the computed CSS styles from the original rendering to our new element. Firefox, Chrome and Safari use getComputedStyle, IE uses currentStyle.</p>

<p>Here&#8217;s our JavaScript function to do just that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getPropValue</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">styleProp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">ele</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">ele</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">[</span><span class="nx">styleProp</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="kc">null</span><span class="p">).</span><span class="nx">getPropertyValue</span><span class="p">(</span><span class="nx">styleProp</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function requires an element, and the CSS property that we want to grab. So we can define an array of properties we want to copy, then loop through these properties to get the entire style for the element.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">styles</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;font-family&quot;</span><span class="p">,</span> <span class="s2">&quot;font-size&quot;</span><span class="p">,</span> <span class="s2">&quot;line-height&quot;</span><span class="p">,</span> <span class="s2">&quot;white-space&quot;</span><span class="p">,</span> <span class="s2">&quot;padding&quot;</span><span class="p">,</span> <span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;float&quot;</span><span class="p">,</span> <span class="s2">&quot;border&quot;</span><span class="p">,</span> <span class="s2">&quot;border-top&quot;</span><span class="p">,</span> <span class="s2">&quot;border-right&quot;</span><span class="p">,</span> <span class="s2">&quot;border-bottom&quot;</span><span class="p">,</span> <span class="s2">&quot;border-left&quot;</span><span class="p">,</span> <span class="s2">&quot;border-color&quot;</span><span class="p">,</span> <span class="s2">&quot;border-width&quot;</span><span class="p">,</span> <span class="s2">&quot;border-style&quot;</span><span class="p">,</span> <span class="s2">&quot;padding-top&quot;</span><span class="p">,</span> <span class="s2">&quot;padding-right&quot;</span><span class="p">,</span> <span class="s2">&quot;padding-bottom&quot;</span><span class="p">,</span> <span class="s2">&quot;padding-left&quot;</span><span class="p">,</span> <span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="s2">&quot;font-weight&quot;</span><span class="p">,</span> <span class="s2">&quot;margin-top&quot;</span><span class="p">,</span> <span class="s2">&quot;margin-left&quot;</span><span class="p">,</span> <span class="s2">&quot;margin-bottom&quot;</span><span class="p">,</span> <span class="s2">&quot;margin-right&quot;</span><span class="p">,</span> <span class="s2">&quot;text-decoration&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getStyles</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getPropValue</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">values</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we give getStyles an element reference and an array of styles, we get an array of computed CSS values for that element. But remember, we need to do this for every single child element, not just the parent s_BREAKING_NEWS_BOX element. So we need a recursive loop that runs getStyles on the parent, the children, grandchildren, etc. We also have a running count, index, to keep give each elements styles a position in an array, element_styles. Thank to Adam Bratt for help getting this to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loopChildrenGrab</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">,</span> <span class="nx">element_styles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">element_styles</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getStyles</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">index</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">loopChildrenGrab</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">styles</span><span class="p">,</span> <span class="nx">element_styles</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">element_styles</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have a multidimensional array of every single elements style, order by the elements position in the DOM. So we can delete the whole web page that we loaded at first, and then run the reverse of the previous functions to assign each CSS property to our copied HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">pushStyles</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">,</span> <span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nx">ele</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="nx">styles</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">loopChildrenPush</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">,</span> <span class="nx">element_styles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pushStyles</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">,</span> <span class="nx">styles</span><span class="p">,</span> <span class="nx">element_styles</span><span class="p">[</span><span class="nx">count</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nx">this_ele</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">loopChildrenPush</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">styles</span><span class="p">,</span> <span class="nx">element_styles</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! We now have successfully copied the HTML and flattened the CSS for each element. s_BREAKING_NEWS_BOX can now be loaded independently of its parent page.</p>

<p>What would it take to do this server-side? In short, render the HTML in some sort of web view, then extract the flattened CSS for every element. While it is possible, and most likely the way to proceed with this project, letting the browser do the heavy lifting rendering CSS is definitely easier in the short term.</p>
]]></content>
  </entry>
  
</feed>
